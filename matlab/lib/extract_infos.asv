% ---------------------------------------------
% ----- INFORMATIONS -----
%   Author          : louis tomczyk
%   Institution     : Telecom Paris
%   Email           : louis.tomczyk@telecom-paris.fr
%   Date            : 2024-07-12
%   Version         : 1.0.4
%   License         : cc-by-nc-sa
%                       CAN:    modify - distribute
%                       CANNOT: commercial use
%                       MUST:   share alike - include license
%
% ----- CHANGE LOG -----
%   2024-07-06  (1.0.0) creation
%   2024-07-09  (1.0.1) caps: closing figures + number of Frames
%   2024-07-10  (1.0.2) caps: sorting the struct
%   2024-07-11  (1.0.3) phase noise management
%   2024-07-12  (1.0.4) phase noise management --- for rx['mode'] = 'pilots'
%
% ----- MAIN IDEA -----
% ----- INPUTS -----
% ----- OUTPUTS -----
% ----- BIBLIOGRAPHY -----
%   Articles/Books
%   Authors             : [A1]
%   Title               :
%   Jounal/Editor       :
%   Volume - N°         :
%   Date                :
%   DOI/ISBN            :
%   Pages               :
%  ----------------------
%   Codes
%   Author              : [C1] louis tomczyk, Diane Prato
%   Author contact      : louis.tomczyk@telecom-paris.fr
%   Affiliation         : Télécom Paris
%   Date                : 2024-04-19
%   Title of program    : MIMO VAE-FIR
%   Code version        : 1.1.4
%   Web Address         : github.com/louis-tomczyk/MIMO-FIR---VAE
% ---------------------------------------------
%%

function caps = extract_infos(caps,Dat,kdata)

caps.Nfiles             = length(Dat);
caps.what_carac         = string({'ThEnd','Sth', 'PhEnd', 'Sph'});  % {dnu, Sth, Sph, ThEnd, PhEnd,Thstd, Phstd}


data                = Dat{kdata};
data                = sort_struct_alphabet(data);
filename            = char(caps.Fn{kdata});
caps.filename       = ['matlab',filename(1:end-4)];

for k = 1:length(caps.what_carac)
    caps.Carac(k)   = get_value_from_filename_in(caps.PathSave,caps.what_carac{k},caps.Fn);
end

caps.FrameChannel   = double(data.FrameChannel);
caps.NFramesTraining= double(data.NFramesTraining);
caps.NFrames        = double(data.NFrames);
caps.NFramesChannel = caps.NFrames-caps.NFramesTraining;
caps.Frames         = linspace(1,caps.NFramesChannel,caps.NFramesChannel);
caps.NBatchFrame    = double(data.NBatchFrame);
caps.NBatchesChannel= double(data.NBatchesChannel);
caps.FIRlength      = double(data.NspTaps);
caps.FIRtaps        = linspace(1,caps.FIRlength,caps.FIRlength)-ceil(caps.FIRlength/2);
caps.kdata          = kdata;
caps.NFramesChannel = caps.NFrames-caps.FrameChannel;

if length(caps.Fn) > 1
    caps.plot.close = 1;
else
    caps.plot.close = 0;
end

if isfield(data,"h_est_batch")
    caps.est_phi            = 1;
    caps.NBatchesTraining   = caps.NFramesTraining*caps.NBatchFrame;
    caps.Batches            = linspace(1,caps.NBatchesChannel,caps.NBatchesChannel);
end

if strcmpi(caps.rx_mode,'pilots')
    caps.NBatchFrameCut     = caps.NBatchFrame-2;
end

caps = sort_struct_alphabet(caps);

end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NESTED FUNCTIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% ---------------------------------------------
% ----- CONTENTS -----
%   get_value_from_filename_in
%   get_number_from_string_in
% ---------------------------------------------


function out = get_value_from_filename_in(folderPath,quantity,varargin)

    cd(folderPath{1})
  
    if nargin == 2
        nfiles          = length(dir(pwd))-2;
        folder_struct   = dir(pwd);
        out             = zeros(nfiles,1);

        for k=1:nfiles
            filename    = folder_struct(k+2).name;
            out(k)      = get_number_from_string_in(filename,quantity);
        end

    else
        nfiles          = length(varargin{1});
        out             = zeros(nfiles,1);
        for k=1:nfiles
            out(k)      = get_number_from_string_in(varargin{1}{k},quantity);
        end
    end

    out = sort(out);
    
end
%-----------------------------------------------------



function out = get_number_from_string_in(stringIn,what,varargin)

    stringIn    = char(stringIn);
    iwhat       = strfind(stringIn,what);

    if nargin == 2
        iendwhat    = iwhat+length(what);
        idashes     = strfind(stringIn,'-');
        [~,itmp]    = max(idashes-iendwhat>0);
        idashNext   = idashes(itmp);
        strTmp      = stringIn(iendwhat+1:idashNext-1);
    else
        if nargin > 2
            if iwhat-varargin{1}<1
                istart = 1;
            else
                istart = iwhat-varargin{1};
            end
            if nargin == 4
                if iwhat+varargin{2}>length(stringIn)
                    iend = length(stringIn);
                else
                    iend = iwhat+varargin{2};
                end
            end
            strTmp  = stringIn(istart:iend);
        end
    end

    indexes = regexp(strTmp,'[0123456789.]');
    out     = str2double(strTmp(indexes));
end
%-----------------------------------------------------